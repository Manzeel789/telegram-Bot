https://api.telegram.org/@NEPSEnepal_Bot:7096733098:AAGrWRrjqgm2hqaFaIH_VuvCbpJ7bjEANPk
from selenium import webdriver
 from selenium.webdriver.chrome.options import Options
 from selenium.webdriver.chrome.service import Service
 from selenium.webdriver.common.by import By
 from selenium.webdriver.support.ui import WebDriverWait
 from selenium.webdriver.support import expected_conditions as EC
 from tabulate import tabulate
 from telegram import Update, Bot
 from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
 import asyncio
 import time
 
 url = https://merolagani.com/LatestMarket.aspx
 chrome_options = Options()
 chrome_options.add_argument('--headless')
 chrome_service = Service()
async def track_stock_loop(bot: Bot):
    global tracking_enabled, driver, old_price

    if tracking_enabled:
        while True:
            if not tracking_enabled:
                break

            new_price = driver.find_element('css selector', 'h2.intraday__price').text.replace(",", "").replace("$\n", "").strip()
            new_price = round(float(new_price), 2)

            if new_price != old_price:
                change = round((old_price - new_price), 2)
                from_previous_close_flat, from_previous_close_percentage = up_down_calc(driver, new_price)

                update_string = f"NEPSE: {comp_name}\nCurrent Price: {new_price}$\nChange: {change}$\nFlat Change From Previous Close: {from_previous_close_flat}$\n% Change From Previous Close: {from_previous_close_percentage}%\n"
                old_price = new_price

                print(update_string)
                await bot.send_message(chat_id=YOUR_CHAT_ID, text=update_string)

            await asyncio.sleep(1)  # Delay between each iteration

await bot.send_message(chat_id= @NEPSEnepal_Bot text=update_string)
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('   Hi, I am a stock tracker bot. If you wish to track the price of your favorite stock plese use  /setstockindex command first. If you need further help just use /help for additional information.')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""I can help you track your favorite stock price live!!

The default stock that is set to the bot is Dow Jones Industrial Average.
So the first thing you should do is set your target stock index and then use any command that you would like.

Commands:

/setstockindex [Your stock index] - set the stock index that you would like to track

/status - check the status of the stock market

/track - start tracking the price

/stop - stop tracking the price

/keydata - get the Key Data
""")
async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(status)

def getting_key_data(driver):
    df = {}
    WebDriverWait(driver, 60).until(EC.visibility_of_element_located((By.CSS_SELECTOR, 'li.kv__item')))
    key_data_containers = driver.find_elements(By.CSS_SELECTOR, 'li.kv__item')
    for key_data_container in key_data_containers:
        label = key_data_container.find_element(By.CSS_SELECTOR, 'small.label').text
        value = key_data_container.find_element(By.CSS_SELECTOR, 'span.primary').text
        df[f'{label}'] = value
    return df 
if __name__ == '__NEPSE__':
    # Create the driver instance
    driver = webdriver.Chrome(service=chrome_service, options=chrome_options)

    # Load the initial URL
    loop = asyncio.get_event_loop()
    loop.run_until_complete(load_url(driver))

    # Telegram bot setup
    app = NEPSE Application.builder().token(7096733098:AAGrWRrjqgm2hqaFaIH_VuvCbpJ7bjEANPk

).build()

    app.add_handler(CommandHandler('start', start_command))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('status', status_command))
    app.add_handler(CommandHandler('keydata', key_data_command))
    app.add_handler(CommandHandler('setstockindex', set_stock_index_command))
    app.add_handler(CommandHandler('track', start_tracking_command))
    app.add_handler(CommandHandler('stop', stop_tracking_command))

    app.add_error_handler(error)

    # Start tracking stock in a separate task
    loop.create_task(track_stock_loop(app.bot))

    print('Polling...')
    app.run_polling(poll_interval=5)
